//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: TestModel.kt:8</p>
  /// </summary>
  public class TestModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<string> MyString => _MyString;
    [NotNull] public IViewableProperty<CQSFile[]> CQSFiles => _CQSFiles;
    [NotNull] public IRdCall<CQSFile[], Unit> CQSFilesSelected => _CQSFilesSelected;
    
    //private fields
    [NotNull] private readonly RdProperty<string> _MyString;
    [NotNull] private readonly RdProperty<CQSFile[]> _CQSFiles;
    [NotNull] private readonly RdCall<CQSFile[], Unit> _CQSFilesSelected;
    
    //primary constructor
    private TestModel(
      [NotNull] RdProperty<string> myString,
      [NotNull] RdProperty<CQSFile[]> cQSFiles,
      [NotNull] RdCall<CQSFile[], Unit> cQSFilesSelected
    )
    {
      if (myString == null) throw new ArgumentNullException("myString");
      if (cQSFiles == null) throw new ArgumentNullException("cQSFiles");
      if (cQSFilesSelected == null) throw new ArgumentNullException("cQSFilesSelected");
      
      _MyString = myString;
      _CQSFiles = cQSFiles;
      _CQSFilesSelected = cQSFilesSelected;
      _MyString.OptimizeNested = true;
      _CQSFiles.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("myString", _MyString));
      BindableChildren.Add(new KeyValuePair<string, object>("cQSFiles", _CQSFiles));
      BindableChildren.Add(new KeyValuePair<string, object>("cQSFilesSelected", _CQSFilesSelected));
    }
    //secondary constructor
    internal TestModel (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdProperty<CQSFile[]>(ReadCQSFileArray, WriteCQSFileArray),
      new RdCall<CQSFile[], Unit>(ReadCQSFileArray, WriteCQSFileArray, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<CQSFile[]> ReadCQSFileArray = CQSFile.Read.Array();
    
    public static  CtxWriteDelegate<CQSFile[]> WriteCQSFileArray = CQSFile.Write.Array();
    
    protected override long SerializationHash => -460322887783238512L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("TestModel (");
      using (printer.IndentCookie()) {
        printer.Print("myString = "); _MyString.PrintEx(printer); printer.Println();
        printer.Print("cQSFiles = "); _CQSFiles.PrintEx(printer); printer.Println();
        printer.Print("cQSFilesSelected = "); _CQSFilesSelected.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionTestModelEx
   {
    public static TestModel GetTestModel(this Solution solution)
    {
      return solution.GetOrCreateExtension("testModel", () => new TestModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: TestModel.kt:10</p>
  /// </summary>
  public sealed class CQSFile : IPrintable, IEquatable<CQSFile>
  {
    //fields
    //public fields
    [NotNull] public string FilePath {get; private set;}
    [NotNull] public string[] NestedFiles {get; private set;}
    
    //private fields
    //primary constructor
    public CQSFile(
      [NotNull] string filePath,
      [NotNull] string[] nestedFiles
    )
    {
      if (filePath == null) throw new ArgumentNullException("filePath");
      if (nestedFiles == null) throw new ArgumentNullException("nestedFiles");
      
      FilePath = filePath;
      NestedFiles = nestedFiles;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string filePath, [NotNull] out string[] nestedFiles)
    {
      filePath = FilePath;
      nestedFiles = NestedFiles;
    }
    //statics
    
    public static CtxReadDelegate<CQSFile> Read = (ctx, reader) => 
    {
      var filePath = reader.ReadString();
      var nestedFiles = ReadStringArray(ctx, reader);
      var _result = new CQSFile(filePath, nestedFiles);
      return _result;
    };
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static CtxWriteDelegate<CQSFile> Write = (ctx, writer, value) => 
    {
      writer.Write(value.FilePath);
      WriteStringArray(ctx, writer, value.NestedFiles);
    };
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CQSFile) obj);
    }
    public bool Equals(CQSFile other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return FilePath == other.FilePath && NestedFiles.SequenceEqual(other.NestedFiles);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + FilePath.GetHashCode();
        hash = hash * 31 + NestedFiles.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CQSFile (");
      using (printer.IndentCookie()) {
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
        printer.Print("nestedFiles = "); NestedFiles.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
